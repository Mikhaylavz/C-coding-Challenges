/*Challenge set by Matt*/

/*Someone has attempted to censor my strings by replacing every vowel with a *, l*k* th*s. Luckily, I've been able to find the vowels that were removed.

Given a censored string and a string of the censored vowels, return the original uncensored string.

Example
uncensor("Wh*r* d*d my v*w*ls g*?", "eeioeo") ➞ "Where did my vowels go?"

uncensor("abcd", "") ➞ "abcd"

uncensor("*PP*RC*S*", "UEAE") ➞ "UPPERCASE"
*/

std::string uncensor(std::string str, std::string vowels)
{
	  int s = str.length();
    int v = vowels.length();

    char vowel_array[v + 1];
    char string_array[s + 1];

    strcpy(string_array, str.c_str());
    strcpy(vowel_array, vowels.c_str());

    for (int i = 0; i < s; i++)
    {
        for (int j = 0; j < v; j++)
        {
            if (string_array[i] == '*')
            {
                string_array[i] = vowel_array[j];
            }
        }
    }
}


/*This is a Edabit challenge solution*/
